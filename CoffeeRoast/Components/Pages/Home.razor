@page "/"
@using CoffeeRoast.Database
@using CoffeeRoast.Models
@rendermode InteractiveServer
@inject CoffeeContext ef

<PageTitle>Главная - Кофейня</PageTitle>

<h1>Каталог товаров</h1>

<!-- Это выбор категории -->
<div class="category-tabs">
    <button class="@(_selectedCategory == "Зерна кофе" ? "active" : "")"
            @onclick="() => SelectCoffeeCategory()">
        Зерна кофе
    </button>
    <button class="@(_selectedCategory == "Аксессуары" ? "active" : "")"
            @onclick="() => SelectAccesosaryCategory()">
        Аксессуары
    </button>
</div>

<!-- Фильтры для кофе -->
@if (_selectedCategory == "Зерна кофе")
{
    <div class="filters">
        <h3>Фильтры:</h3>
        
        <select @bind="_coffeeFilter.Type">
            <option value="">Все типы кофе</option>
            @foreach (var type in new[] { "Арабика", "Робуста", "Купажи", "Specialty" })
            {
                <option value="@type">@type</option>
            }
        </select>

        <select @bind="_coffeeFilter.Roast">
            <option value="">Все степени обжарки</option>
            @foreach (var roast in new[] { "Светлая", "Средняя", "Тёмная" })
            {
                <option value="@roast">@roast</option>
            }
        </select>

        <select @bind="_coffeeFilter.Region">
            <option value="">Все регионы</option>
            @foreach (var region in new[] { "Америка", "Африка", "Азия" })
            {
                <option value="@region">@region</option>
            }
        </select>
    </div>
}

<!-- Для аксессуаров -->
@if (_selectedCategory == "Аксессуары")
{
    <div class="filters">
        <h3>Фильтры:</h3>
        
        <select @bind="_accessoryFilter.Type">
            <option value="">Все типы аксессуаров</option>
            @foreach (var type in new[] { "Турки", "Френч-прессы", "Фильтры", "Кружки", "Кофемолки" })
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
}

<!-- Отображение товаров -->
<div class="products-grid">
    @foreach (var product in FilteredProducts)
    {
        <div class="product-card">
            <img src="@product.PhotoLink" alt="@product.Tittle" />
            <h3>@product.Tittle</h3>
            <p>@product.Description</p>
            <p>Цена: @product.Price руб.</p>
            
            @if (product.Type == "Зерна кофе")
            {
                <p>Тип: @product.SubType</p>
                <p>Обжарка: @product.DegreeOfRoast</p>
                <p>Регион: @product.Region</p>
            }
            else
            {
                <p>Тип: @product.SubType</p>
            }
            
            <button @onclick="() => AddToBasket(product.Id)">
                Добавить в корзину
            </button>
        </div>
    }
</div>

<!-- @product.Count @(product.Type == "Зерна кофе" ? "г" : "шт") граммы и штуки -->

@code {
    private Basket _basket = new();
    private string _selectedCategory = "Зерна кофе";
    
    private CoffeeFilter _coffeeFilter = new();
    private AccessoryFilter _accessoryFilter = new();

    private class CoffeeFilter
    {
        public string Type { get; set; } = "";
        public string Roast { get; set; } = "";
        public string Region { get; set; } = "";
    }

    private class AccessoryFilter
    {
        public string Type { get; set; } = "";
    }

    private IEnumerable<Product> FilteredProducts
    {
        get
        {
            var products = ef.Products.Where(p => p.Type == _selectedCategory);
            
            if (_selectedCategory == "Зерна кофе")
            {
                if (!string.IsNullOrEmpty(_coffeeFilter.Type))
                    products = products.Where(p => p.SubType == _coffeeFilter.Type);
                
                if (!string.IsNullOrEmpty(_coffeeFilter.Roast))
                    products = products.Where(p => p.DegreeOfRoast == _coffeeFilter.Roast);
                
                if (!string.IsNullOrEmpty(_coffeeFilter.Region))
                    products = products.Where(p => p.Region == _coffeeFilter.Region);
            }
            else if (_selectedCategory == "Аксессуары")
            {
                if (!string.IsNullOrEmpty(_accessoryFilter.Type))
                    products = products.Where(p => p.SubType == _accessoryFilter.Type);
            }
            
            return products.ToList();
        }
    }

    private void SelectCategory(string category)
    {
        _selectedCategory = category;
        _coffeeFilter = new CoffeeFilter();
        _accessoryFilter = new AccessoryFilter();
    }

    private void AddToBasket(int productId)
    {
        var product = ef.Products.FirstOrDefault(x => x.Id == productId);
        
        if (product != null)
        {
            _basket = new Basket
            {
                Id = product.Id,
                BasketTittle = product.Tittle,
                BasketPhotoLink = product.PhotoLink,
                BasketType = product.Type,
                BasketCount = product.Count,
                BasketPrice = product.Price,
                BasketDegreeOfRoast = product.DegreeOfRoast,
                BasketRegion = product.Region
            };
            
            ef.Add(_basket);
            ef.SaveChanges();
        }
    }
    private void SelectCoffeeCategory()
    {
        SelectCategory("Зерна кофе");
    }

    private void SelectAccesosaryCategory()
    {
        SelectCategory("Аксессуары");
    }
}