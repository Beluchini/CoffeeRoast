@page "/"
@using CoffeeRoast.Database
@using CoffeeRoast.Models
@rendermode InteractiveServer
@inject CoffeeContext ef
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

<PageTitle>Главная - CoffeeRoast</PageTitle>

<!-- Окно для регистрации/входа -->
@if (_showAuthModal)
{
    <div class="auth-modal">
        <div class="auth-content">
            <h3>@(_isLoginMode ? "Вход" : "Регистрация")</h3>

            @if (!_isLoginMode)
            {
                <input type="text" placeholder="Имя" @bind="@_registerUser.Name"/>
                <input type="text" placeholder="Фамилия" @bind="@_registerUser.LastName"/>
                <input type="text" placeholder="Отчество" @bind="@_registerUser.MiddleName"/>
            }

            <input type="email" placeholder="Email" @bind="@_currentEmail"/>
            <input type="password" placeholder="Пароль" @bind="@_currentPassword"/>

            @if (!string.IsNullOrEmpty(_authMessage))
            {
                <div class="auth-message @(_authIsError ? "error" : "success")">
                    @_authMessage
                </div>
            }

            <div class="auth-buttons">
                <button @onclick="HandleAuth">
                    @(_isLoginMode ? "Войти" : "Зарегистрироваться")
                </button>
                <button @onclick="ToggleAuthMode">
                    @(_isLoginMode ? "Нет аккаунта? Зарегистрироваться" : "Уже есть аккаунт? Войти")
                </button>
                <button @onclick="CloseAuthModal">Отмена</button>
            </div>
        </div>
    </div>
}

<!-- Шапка с кнопками авторизации -->
<div class="header">
    <div class="auth-buttons-header">
        @if (_currentUser != null)
        {
        <span>Добро пожаловать, @_currentUser.Name!</span>
        <button @onclick="GoToBasket" class="basket-btn">
            Перейти в корзину
        </button>
        <button @onclick="Logout">Выйти</button>
        }
        else
        {
        <button @onclick="() => ShowAuthModal(true)">Войти</button>
        <button @onclick="() => ShowAuthModal(false)">Регистрация</button>
        }
    </div>
</div>

<!-- Выбор категории -->
<div class="category-tabs">
    <button class="@(_selectedCategory == "Зерна кофе" ? "active" : "")"
            @onclick="() => FixCoffee()">
        Зерна кофе
    </button>
    <button class="@(_selectedCategory == "Аксессуары" ? "active" : "")"
            @onclick="() => FixAcces()">
        Аксессуары
    </button>
    <button class="@(_selectedCategory == "Все товары" ? "active" : "")"
            @onclick="() => FixAllProduct()">
        Все товары
    </button>
</div>

<!-- Фильтры для кофе -->
@if (_selectedCategory == "Зерна кофе" || _selectedCategory == "Все товары")
{
    <div class="filters">
        <h3>Фильтры:</h3>

        <div class="filter-group">
            <h4>Тип кофе:</h4>
            <div class="filter-buttons">
                <button class="@(_coffeeFilter.Type == "" ? "active" : "")"
                        @onclick="() => FixSetCoffeeType()">
                    Все типы
                </button>
                @foreach (var type in new[] { "Арабика", "Робуста", "Купажи", "Specialty" })
                {
                    <button class="@(_coffeeFilter.Type == type ? "active" : "")"
                            @onclick="() => SetCoffeeFilterType(type)">
                        @type
                    </button>
                }
            </div>
        </div>

        <div class="filter-group">
            <h4>Степень обжарки:</h4>
            <div class="filter-buttons">
                <button class="@(_coffeeFilter.Roast == "" ? "active" : "")"
                        @onclick="() => FixSetCoffeeRoast()">
                    Все обжарки
                </button>
                @foreach (var roast in new[] { "Светлая", "Средняя", "Тёмная" })
                {
                    <button class="@(_coffeeFilter.Roast == roast ? "active" : "")"
                            @onclick="() => SetCoffeeFilterRoast(roast)">
                        @roast
                    </button>
                }
            </div>
        </div>

        <div class="filter-group">
            <h4>Регион:</h4>
            <div class="filter-buttons">
                <button class="@(_coffeeFilter.Region == "" ? "active" : "")"
                        @onclick="() => FixSetCoffeeRegion()">
                    Все регионы
                </button>
                @foreach (var region in new[] { "Америка", "Африка", "Азия" })
                {
                    <button class="@(_coffeeFilter.Region == region ? "active" : "")"
                            @onclick="() => SetCoffeeFilterRegion(region)">
                        @region
                    </button>
                }
            </div>
        </div>
    </div>
}

<!-- Для аксессуаров -->
@if (_selectedCategory == "Аксессуары" || _selectedCategory == "Все товары")
{
    <div class="filters">
        <h3>Фильтры:</h3>

        <div class="filter-group">
            <h4>Тип аксессуаров:</h4>
            <div class="filter-buttons">
                <button class="@(_accessoryFilter.Type == "" ? "active" : "")"
                        @onclick="() => FixSelectAcces()">
                    Все аксессуары
                </button>
                @foreach (var type in new[] { "Турки", "Френч-прессы", "Фильтры", "Кружки", "Кофемолки" })
                {
                    <button class="@(_accessoryFilter.Type == type ? "active" : "")"
                            @onclick="() => SetAccessoryFilterType(type)">
                        @type
                    </button>
                }
            </div>
        </div>
    </div>
}

<!-- Уведомление о необходимости входа -->
@if (_showLoginNotification)
{
    <div class="notification">
        <span>Пожалуйста, войдите в систему, чтобы добавить товар в корзину</span>
        <button @onclick="CloseNotification">✕</button>
    </div>
}

<!-- Отображение товаров -->
<div class="products-grid">
    @foreach (var product in FilteredProducts)
    {
        <div class="product-card">
            <img src="@product.PhotoLink" alt="@product.Tittle"/>
            <h3>@product.Tittle</h3>
            <p>@product.Description</p>
            <p>Цена: @product.Price руб.</p>

            @if (product.Type == "Зерна кофе")
            {
                <p>Тип: @product.SubType</p>
                <p>Обжарка: @product.DegreeOfRoast</p>
                <p>Регион: @product.Region</p>
            }
            else
            {
                <p>Тип: @product.SubType</p>
            }

            <button @onclick="() => AddToBasket(product.Id)">
                Добавить в корзину
            </button>
        </div>
    }
</div>

@code {
    private const string USER_STORAGE_KEY = "currentUserId";
    private Basket _basket = new();
    private string _selectedCategory = "Все товары";

    private CoffeeFilter _coffeeFilter = new();
    private AccessoryFilter _accessoryFilter = new();

// Переменные для авторизации
    private bool _showAuthModal = false;
    private bool _isLoginMode = true;
    private string _currentEmail = "";
    private string _currentPassword = "";
    private string _authMessage = "";
    private bool _authIsError = false;
    private User _currentUser = null;
    private User _registerUser = new User();

// Уведомление о необходимости входа
    private bool _showLoginNotification = false;

    private class CoffeeFilter
    {
        public string Type { get; set; } = "";
        public string Roast { get; set; } = "";
        public string Region { get; set; } = "";
    }

    private class AccessoryFilter
    {
        public string Type { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await ProtectedLocalStore.GetAsync<int>(USER_STORAGE_KEY);
            if (result.Success && result.Value > 0)
            {
                _currentUser = ef.Users.FirstOrDefault(u => u.Id == result.Value);
            }
        }
        catch
        {
            // Игнорируем ошибки при чтении хранилища
        }
    }

    private IEnumerable<Product> FilteredProducts
    {
        get
        {
            IQueryable<Product> products;

// Выбираем товары в зависимости от выбранной категории
            if (_selectedCategory == "Все товары")
            {
                products = ef.Products.AsQueryable();
            }
            else
            {
                products = ef.Products.Where(p => p.Type == _selectedCategory);
            }

// Применяем фильтры для кофе (если выбраны)
            if (!string.IsNullOrEmpty(_coffeeFilter.Type))
                products = products.Where(p => p.SubType == _coffeeFilter.Type);

            if (!string.IsNullOrEmpty(_coffeeFilter.Roast))
                products = products.Where(p => p.DegreeOfRoast == _coffeeFilter.Roast);

            if (!string.IsNullOrEmpty(_coffeeFilter.Region))
                products = products.Where(p => p.Region == _coffeeFilter.Region);

// Применяем фильтры для аксессуаров (если выбраны)
            if (!string.IsNullOrEmpty(_accessoryFilter.Type))
                products = products.Where(p => p.SubType == _accessoryFilter.Type);

            return products.ToList();
        }
    }

// Методы авторизации
    private void ShowAuthModal(bool isLoginMode)
    {
        _isLoginMode = isLoginMode;
        _showAuthModal = true;
        _authMessage = "";
        _currentEmail = "";
        _currentPassword = "";
        if (!isLoginMode)
        {
            _registerUser = new User();
        }
    }

    private void CloseAuthModal()
    {
        _showAuthModal = false;
        _authMessage = "";
    }

    private void ToggleAuthMode()
    {
        _isLoginMode = !_isLoginMode;
        _authMessage = "";
    }

    private async Task HandleAuth()
    {
        if (string.IsNullOrEmpty(_currentEmail) || string.IsNullOrEmpty(_currentPassword))
        {
            _authMessage = "Заполните все поля";
            _authIsError = true;
            return;
        }

        if (_isLoginMode)
        {
            LoginUser();
        }
        else
        {
            RegisterUser();
        }
    }

    private async Task LoginUser()
    {
        var user = ef.Users.FirstOrDefault(u => u.Email == _currentEmail && u.Password == _currentPassword);

        if (user != null)
        {
            _currentUser = user;
        
            // Сохраняем ID пользователя в локальное хранилище
            await ProtectedLocalStore.SetAsync(USER_STORAGE_KEY, user.Id);
        
            _authMessage = "Вход выполнен успешно!";
            _authIsError = false;
        
            await Task.Delay(1000);
            _showAuthModal = false;
            StateHasChanged();
        }
        else
        {
            _authMessage = "Неверный email или пароль";
            _authIsError = true;
        }
    }

    private async Task RegisterUser()
    {
         // Проверяем, нет ли уже пользователя с таким email
        if (ef.Users.Any(u => u.Email == _currentEmail))
        {
            _authMessage = "Пользователь с таким email уже существует";
            _authIsError = true;
            StateHasChanged();
            return;
        }

         // Валидация данных
        if (string.IsNullOrEmpty(_registerUser.Name) || string.IsNullOrEmpty(_registerUser.LastName))
        {
            _authMessage = "Заполните имя и фамилию";
            _authIsError = true;
            StateHasChanged();
            return;
        }

        // Создаем нового пользователя
        var newUser = new User
        {
            Name = _registerUser.Name,
            MiddleName = _registerUser.MiddleName,
            LastName = _registerUser.LastName,
            Email = _currentEmail,
            Password = _currentPassword,
            PhoneNumber = ""
        };

        ef.Users.Add(newUser);
        ef.SaveChanges();

        await ProtectedLocalStore.SetAsync(USER_STORAGE_KEY, newUser.Id);

        _authMessage = "Регистрация прошла успешно!";
        _authIsError = false;

// Автоматически входим после регистрации
        _currentUser = newUser;

        Task.Delay(1000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                _showAuthModal = false;
                StateHasChanged();
            });
        });

        StateHasChanged();
    }

    private async Task Logout()
    {
        await ProtectedLocalStore.DeleteAsync(USER_STORAGE_KEY);
        
        _currentUser = null;
        StateHasChanged();
    }

// Методы для уведомлений
    private void ShowLoginNotification()
    {
        _showLoginNotification = true;
        StateHasChanged();

// Автоматически скрываем уведомление через 3 секунды
        Task.Delay(3000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                _showLoginNotification = false;
                StateHasChanged();
            });
        });
    }

    private void CloseNotification()
    {
        _showLoginNotification = false;
        StateHasChanged();
    }

    private void SelectCategory(string category)
    {
        _selectedCategory = category;
// Сбрасываем фильтры при смене категории
        _coffeeFilter = new CoffeeFilter();
        _accessoryFilter = new AccessoryFilter();
    }

// Методы для фильтров кофе
    private void SetCoffeeFilterType(string type)
    {
        _coffeeFilter.Type = type;
    }

    private void SetCoffeeFilterRoast(string roast)
    {
        _coffeeFilter.Roast = roast;
    }

    private void SetCoffeeFilterRegion(string region)
    {
        _coffeeFilter.Region = region;
    }

// Метод для фильтра аксессуаров
    private void SetAccessoryFilterType(string type)
    {
        _accessoryFilter.Type = type;
    }

    private void AddToBasket(int productId)
    {
        if (_currentUser == null)
        {
// Показываем уведомление и открываем модальное окно входа
            ShowLoginNotification();
            ShowAuthModal(true);
            return;
        }

        var product = ef.Products.FirstOrDefault(x => x.Id == productId);

        if (product != null)
        {
            _basket = new Basket
            {
                Id = product.Id,
                BasketTittle = product.Tittle,
                BasketPhotoLink = product.PhotoLink,
                BasketType = product.Type,
                BasketCount = product.Count,
                BasketPrice = product.Price,
                BasketDegreeOfRoast = product.DegreeOfRoast,
                BasketRegion = product.Region
            };

            ef.Add(_basket);
            ef.SaveChanges();

// Показываем сообщение об успешном добавлении
            _authMessage = "Товар добавлен в корзину!";
            _authIsError = false;
            StateHasChanged();
        }
    }
    
    private void GoToBasket()
    {
            // Навигация на страницу корзины
            NavigationManager.NavigateTo("/basketpage");
    }

    private void FixSelectAcces()
    {
        SetAccessoryFilterType("");
    }

    private void FixSetCoffeeRoast()
    {
        SetCoffeeFilterRoast("");
    }

    private void FixSetCoffeeType()
    {
        SetCoffeeFilterType("");
    }

    private void FixSetCoffeeRegion()
    {
        SetCoffeeFilterRegion("");
    }

    private void FixCoffee()
    {
        SelectCategory("Зерна кофе");
    }

    private void FixAcces()
    {
        SelectCategory("Аксессуары");
    }

    private void FixAllProduct()
    {
        SelectCategory("Все товары");
    }
}