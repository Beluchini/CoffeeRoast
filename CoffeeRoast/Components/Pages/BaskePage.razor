@page "/BasketPage"
@using CoffeeRoast.Database
@using CoffeeRoast.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer
@inject CoffeeContext ef
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager NavigationManager

<div>
    <h2>–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞</h2>

    @if (!string.IsNullOrEmpty(_message))
    {
        <div class="notification @(_isError ? "error" : "success")">
            @_message
        </div>
    }

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã -->
    @if (_showPaymentModal)
    {
        <div class="payment-modal">
            <div class="payment-content">
                <h3>üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</h3>

                <div class="card-form">
                    <div class="form-group">
                        <label>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</label>
                        <input type="text"
                               class="form-control card-input"
                               placeholder="0000 0000 0000 0000"
                               maxlength="19"
                               @bind="_cardNumber"/>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="–ú–ú/–ì–ì"
                                   maxlength="5"
                                   @bind="_cardExpiry"/>
                        </div>

                        <div class="form-group">
                            <label>CVV:</label>
                            <input type="password"
                                   class="form-control"
                                   placeholder="123"
                                   maxlength="3"
                                   @bind="_cardCvv"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:</label>
                        <input type="text"
                               class="form-control"
                               placeholder="ALEX KULAGIN"
                               @bind="_cardHolder"/>
                    </div>

                    <div class="payment-actions">
                        <button @onclick="ProcessPayment" class="pay-btn" disabled="@_isProcessing">
                            @(_isProcessing ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..." : "–û–ø–ª–∞—Ç–∏—Ç—å " + _userBasketItems.Sum(item => item.BasketPrice * item.BasketCount) + " —Ä—É–±.")
                        </button>
                        <button @onclick="ClosePaymentModal" class="cancel-pay-btn">–û—Ç–º–µ–Ω–∞</button>
                    </div>

                    <div class="card-icons">
                        <span class="card-icon">üí≥</span>
                        <span class="card-icon">üîí</span>
                        <span class="secure-text">–û–ø–ª–∞—Ç–∞ –∑–∞—â–∏—â–µ–Ω–∞</span>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_currentUser == null)
    {
        <div class="auth-notification">
            <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É</p>
            <button @onclick="GoToLogin">–í–æ–π—Ç–∏</button>
        </div>
    }
    else if (!_userBasketItems.Any())
    {
        <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
        <button @onclick="GoToHome">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º</button>
    }
    else
    {
        <div class="basket-items">
            <h3>–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ (@_userBasketItems.Count)</h3>
            @foreach (var item in _userBasketItems)
            {
                <div class="basket-item">
                    <img style="width: 100px; height: 100px" src="@item.BasketPhotoLink" alt="@item.BasketTittle"/>
                    <div class="item-details">
                        <h4>@item.BasketTittle</h4>
                        <p>–¢–∏–ø: @item.BasketType</p>
                        @if (!string.IsNullOrEmpty(item.BasketDegreeOfRoast))
                        {
                            <p>–û–±–∂–∞—Ä–∫–∞: @item.BasketDegreeOfRoast</p>
                        }
                        @if (!string.IsNullOrEmpty(item.BasketRegion))
                        {
                            <p>–†–µ–≥–∏–æ–Ω: @item.BasketRegion</p>
                        }

                        <div class="quantity-controls">
                            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                            <div class="quantity-buttons">
                                <button @onclick="() => DecreaseQuantity(item)"
                                        class="quantity-btn"
                                        disabled="@(item.BasketCount <= 1)">
                                    -
                                </button>
                                <span class="quantity-value">@item.BasketCount</span>
                                <button @onclick="() => IncreaseQuantity(item)"
                                        class="quantity-btn">
                                    +
                                </button>
                            </div>
                        </div>

                        <p>–¶–µ–Ω–∞ –∑–∞ —à—Ç: @item.BasketPrice —Ä—É–±.</p>
                        <p class="item-total">–ò—Ç–æ–≥–æ: @(item.BasketPrice * item.BasketCount) —Ä—É–±.</p>
                    </div>
                    <button @onclick="() => RemoveFromBasket(item.Id)" class="remove-btn">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            }

            <div class="total-section">
                <h3>–û–±—â–∞—è —Å—É–º–º–∞: @_userBasketItems.Sum(item => item.BasketPrice * item.BasketCount) —Ä—É–±.</h3>
                <p>–¢–æ–≤–∞—Ä–æ–≤: @_userBasketItems.Sum(item => item.BasketCount) —à—Ç.</p>
            </div>
        </div>

        <div class="order-section">
            <h3>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
            <EditForm Model="_order" OnValidSubmit="SubmitOrder">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</label>
                    <InputDate @bind-Value="_order.OrderDate" class="form-control"/>
                    <ValidationMessage For="@(() => _order.OrderDate)"/>
                </div>

                <div class="form-group">
                    <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
                    <InputText @bind-Value="_order.Addres" class="form-control"/>
                    <ValidationMessage For="@(() => _order.Addres)"/>
                </div>

                <div class="form-group">
                    <label>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</label>
                    <div class="payment-options">
                        <button type="button" @onclick="OpenPaymentModal" class="payment-option-btn">
                            üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π
                        </button>
                        <button type="button" @onclick="() => FixSelectPay()"
                                class="payment-option-btn @(_paymentMethod == "cash" ? "selected" : "")">
                            üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
                        </button>
                    </div>
                </div>

                <button type="submit" class="order-btn" disabled="@_isSubmitting">
                    @(_isSubmitting ? "–û—Ñ–æ—Ä–º–ª—è–µ–º..." : "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
                </button>
            </EditForm>
        </div>
    }
</div>

@code {
    private const string USER_STORAGE_KEY = "currentUserId";
    private User _currentUser;
    private List<Basket> _userBasketItems = new List<Basket>();
    private Order _order = new Order();
    private string _message = "";
    private bool _isError = false;
    private bool _isSubmitting = false;
    private string _paymentMethod = "";

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
    private bool _showPaymentModal = false;
    private string _cardNumber = "";
    private string _cardExpiry = "";
    private string _cardCvv = "";
    private string _cardHolder = "";
    private bool _isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            var result = await ProtectedLocalStore.GetAsync<int>(USER_STORAGE_KEY);
            if (result.Success && result.Value > 0)
            {
                _currentUser = ef.Users.FirstOrDefault(u => u.Id == result.Value);
                if (_currentUser != null)
                {
                    await LoadBasketItems();
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", true);
        }
    }

    private async Task LoadBasketItems()
    {
        try
        {
            _userBasketItems = ef.Baskets
                .Where(b => b.UserId == _currentUser.Id)
                .ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã", true);
        }
    }

    private void OpenPaymentModal()
    {
        _showPaymentModal = true;
        _paymentMethod = "card";
    }

    private void ClosePaymentModal()
    {
        _showPaymentModal = false;
        _cardNumber = "";
        _cardExpiry = "";
        _cardCvv = "";
        _cardHolder = "";
    }

    private void SelectPayment(string method)
    {
        _paymentMethod = method;
        if (method == "card")
        {
            OpenPaymentModal();
        }
    }

    private async Task ProcessPayment()
    {
        _isProcessing = true;

// –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
        await Task.Delay(2000); // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

        _isProcessing = false;
        _showPaymentModal = false;

        ShowMessage("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è...");

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        await SubmitOrderAfterPayment();
    }

    private async Task SubmitOrderAfterPayment()
    {
        _isSubmitting = true;

        try
        {
            if (_currentUser == null || !_userBasketItems.Any())
            {
                ShowMessage("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", true);
                return;
            }

            if (string.IsNullOrEmpty(_order.Addres) || _order.OrderDate == default)
            {
                ShowMessage("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", true);
                return;
            }

// –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            foreach (var basketItem in _userBasketItems)
            {
                var order = new Order
                {
                    OrderTittle = basketItem.BasketTittle,
                    OrderPhotoLink = basketItem.BasketPhotoLink,
                    OrderType = basketItem.BasketType,
                    OrderDegreeOfRoast = basketItem.BasketDegreeOfRoast,
                    OrderRegion = basketItem.BasketRegion,
                    OrderCount = basketItem.BasketCount,
                    OrderPrice = basketItem.BasketPrice,
                    OrderDate = _order.OrderDate,
                    Addres = _order.Addres,
                    PaymentMethod = _paymentMethod,
                    UserId = _currentUser.Id
                };

                ef.Orders.Add(order);
            }

// –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userBasketItems = ef.Baskets.Where(b => b.UserId == _currentUser.Id).ToList();
            ef.Baskets.RemoveRange(userBasketItems);

            await ef.SaveChangesAsync();

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            _userBasketItems = new List<Basket>();
            _order = new Order();
            _paymentMethod = "";

            ShowMessage("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!");
        }
        catch (Exception ex)
        {
            ShowMessage($"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {ex.Message}", true);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task SubmitOrder()
    {
        if (string.IsNullOrEmpty(_paymentMethod))
        {
            ShowMessage("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", true);
            return;
        }

        if (_paymentMethod == "card")
        {
            OpenPaymentModal();
        }
        else
        {
            await SubmitOrderAfterPayment();
        }
    }
    
    private async Task IncreaseQuantity(Basket item)
    {
        try
        {
            item.BasketCount++;
            ef.Baskets.Update(item);
            await ef.SaveChangesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowMessage("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", true);
        }
    }

    private async Task DecreaseQuantity(Basket item)
    {
        try
        {
            if (item.BasketCount > 1)
            {
                item.BasketCount--;
                ef.Baskets.Update(item);
                await ef.SaveChangesAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ShowMessage("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", true);
        }
    }

    private async Task RemoveFromBasket(int basketId)
    {
        try
        {
            var item = ef.Baskets.FirstOrDefault(b => b.Id == basketId);
            if (item != null && item.UserId == _currentUser.Id)
            {
                ef.Baskets.Remove(item);
                await ef.SaveChangesAsync();
                await LoadBasketItems();
                ShowMessage("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã");
            }
        }
        catch (Exception ex)
        {
            ShowMessage("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", true);
        }
    }

    private void ShowMessage(string message, bool isError = false)
    {
        _message = message;
        _isError = isError;
        StateHasChanged();
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/");
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void FixSelectPay()
    {
        SelectPayment("cach");
    }
}

